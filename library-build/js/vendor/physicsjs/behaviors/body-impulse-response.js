/**
 * PhysicsJS v0.5.4 - 2014-02-03
 * A modular, extendable, and easy-to-use physics engine for javascript
 * http://wellcaffeinated.net/PhysicsJS
 *
 * Copyright (c) 2014 Jasper Palfree <jasper@wellcaffeinated.net>
 * Licensed MIT
 */

(function(e,t){typeof define=="function"&&define.amd?define(["physicsjs"],t):typeof exports=="object"?module.exports=t.apply(e,["physicsjs"].map(require)):t.call(e,e.Physics)})(this,function(e){return e.behavior("body-impulse-response",function(t){var n={},r="collisions:detected";return{connect:function(e){e.subscribe(r,this.respond,this)},disconnect:function(e){e.unsubscribe(r,this.respond)},collideBodies:function(t,n,r,i,s,o){var u=t.fixed,a=n.fixed,f=e.scratchpad(),l=f.vector().clone(s);if(u&&a){f.done();return}u?n.state.pos.vadd(l):a?t.state.pos.vsub(l):(l.mult(.5),t.state.pos.vsub(l),n.state.pos.vadd(l));var c=u?0:1/t.moi,h=a?0:1/n.moi,p=u?0:1/t.mass,d=a?0:1/n.mass,v=o?0:t.restitution*n.restitution,m=t.cof*n.cof,g=f.vector().clone(r),y=f.vector().clone(g).perp(!0),b=f.vector().clone(i),w=f.vector().clone(i).vadd(t.state.pos).vsub(n.state.pos),E=f.vector(),S=t.state.angular.vel,x=n.state.angular.vel,T=f.vector().clone(n.state.vel).vadd(E.clone(w).perp(!0).mult(x)).vsub(t.state.vel).vsub(E.clone(b).perp(!0).mult(S)),N=b.proj(g),C=b.proj(y),k=w.proj(g),L=w.proj(y),A=T.proj(g),O=T.proj(y),M,_,D,P=!1;if(A>=0){f.done();return}M=-((1+v)*A)/(p+d+c*C*C+h*L*L),u?(n.state.vel.vadd(g.mult(M*d)),n.state.angular.vel-=M*h*L):a?(t.state.vel.vsub(g.mult(M*p)),t.state.angular.vel+=M*c*C):(n.state.vel.vadd(g.mult(M*d)),n.state.angular.vel-=M*h*L,t.state.vel.vsub(g.mult(p*n.mass)),t.state.angular.vel+=M*c*C),m&&O&&(D=O/(p+d+c*N*N+h*k*k),P?M=D:(_=O<0?-1:1,M*=_*m,M=_===1?Math.min(M,D):Math.max(M,D)),u?(n.state.vel.vsub(y.mult(M*d)),n.state.angular.vel-=M*h*k):a?(t.state.vel.vadd(y.mult(M*p)),t.state.angular.vel+=M*c*N):(n.state.vel.vsub(y.mult(M*d)),n.state.angular.vel-=M*h*k,t.state.vel.vadd(y.mult(p*n.mass)),t.state.angular.vel+=M*c*N)),f.done()},respond:function(t){var n=this,r,i=e.util.shuffle(t.collisions);for(var s=0,o=i.length;s<o;++s)r=i[s],n.collideBodies(r.bodyA,r.bodyB,r.norm,r.pos,r.mtv)}}}),e});